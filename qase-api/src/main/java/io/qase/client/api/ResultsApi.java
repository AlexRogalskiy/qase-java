/*
 * Qase.io API
 * # Introduction  You can use our API to access [Qase.io](https://qase.io) API endpoints, which allows to retrieve information about entities stored in database and perform actions with them. The API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer).  # API Rate limits  Your application can make up to 200 API requests per minute.  Once the limit is exceeded, clients receive an HTTP 429 with a Retry-After: X header to indicate how long their timeout period is before they will be able to send requests again. The timeout period is set to 60 seconds once the limit is exceeded.  # Authentication  To authorize, use this code:  ```shell # With shell, you can just pass the correct header with each request curl \"https://api.qase.io/v1/api_endpoint\"   -H \"Token: api_token\"   -H \"Content-Type: application/json\" ```  Make sure to replace `api_token` with your API key.  Qase.io uses API tokens to authenticate requests. You can view an manage your API keys in [API tokens pages](https://app.qase.io/user/api/token).  Your API keys has the same access rights as your role in the app, so be sure to keep them secure! Do not share your secret API keys in publicly accessible areas such as GitHub, client-side code, and so forth.  Qase API expects for the API key to be included in all API requests to the server in a header that looks like the following:  `Token: api_token`  You must replace `api_token` with your personal API key.  All API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Calls made over plain HTTP will fail. API requests without authentication will also fail.  # Access rights  Qase.io is using Role-based Access Control system to restrict some features usage in Web interface and the same rules are applied to API methods. In description for each method you will find a rule name, that is required to perform an action through API. If you don't have enough access rights, you will receive an error with `403` status code.  # Errors  Qase API uses the following error codes:  Code | Meaning ---------- | ------- 400 | Bad Request - Your request is invalid. 401 | Unauthorized - Your API key is wrong. 403 | Forbidden - Your role doesn't have enough permissions to perform this action 404 | Not Found - The resource could not be found. 405 | Method Not Allowed - You tried to access a resource with an invalid method. 406 | Not Acceptable - You requested a format that isn't json. 410 | Gone - The resource requested has been removed from our servers. 429 | Too Many Requests - You're performing too many requests! Slow down! 500 | Internal Server Error - We had a problem with our server. Try again later. 503 | Service Unavailable - We're temporarily offline for maintenance. Please try again later. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.qase.client.api;

import com.google.gson.reflect.TypeToken;
import io.qase.api.exceptions.QaseException;
import io.qase.api.inner.FilterHelper;
import io.qase.client.*;
import io.qase.client.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResultsApi {
    private ApiClient localVarApiClient;

    public ResultsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResultsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createResult
     * @param code Code of project, where to search entities. (required)
     * @param idOrHash Id or Hash. (required)
     * @param resultCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResultCall(String code, String idOrHash, ResultCreate resultCreate, final ApiCallback _callback) throws QaseException {
        Object localVarPostBody = resultCreate;

        // create path and map variables
        String localVarPath = "/result/{code}/{id_or_hash}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "id_or_hash" + "\\}", localVarApiClient.escapeString(idOrHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createResultValidateBeforeCall(String code, String idOrHash, ResultCreate resultCreate, final ApiCallback _callback) throws QaseException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new QaseException("Missing the required parameter 'code' when calling createResult(Async)");
        }
        
        // verify the required parameter 'idOrHash' is set
        if (idOrHash == null) {
            throw new QaseException("Missing the required parameter 'idOrHash' when calling createResult(Async)");
        }
        
        // verify the required parameter 'resultCreate' is set
        if (resultCreate == null) {
            throw new QaseException("Missing the required parameter 'resultCreate' when calling createResult(Async)");
        }
        

        okhttp3.Call localVarCall = createResultCall(code, idOrHash, resultCreate, _callback);
        return localVarCall;

    }

    /**
     * Create test run result.
     * This method allows to create test run result by Run Id. 
     * @param code Code of project, where to search entities. (required)
     * @param idOrHash Id or Hash. (required)
     * @param resultCreate  (required)
     * @return Response
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public Response createResult(String code, String idOrHash, ResultCreate resultCreate) throws QaseException {
        ApiResponse<Response> localVarResp = createResultWithHttpInfo(code, idOrHash, resultCreate);
        return localVarResp.getData();
    }

    /**
     * Create test run result.
     * This method allows to create test run result by Run Id. 
     * @param code Code of project, where to search entities. (required)
     * @param idOrHash Id or Hash. (required)
     * @param resultCreate  (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response> createResultWithHttpInfo(String code, String idOrHash, ResultCreate resultCreate) throws QaseException {
        okhttp3.Call localVarCall = createResultValidateBeforeCall(code, idOrHash, resultCreate, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create test run result. (asynchronously)
     * This method allows to create test run result by Run Id. 
     * @param code Code of project, where to search entities. (required)
     * @param idOrHash Id or Hash. (required)
     * @param resultCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResultAsync(String code, String idOrHash, ResultCreate resultCreate, final ApiCallback<Response> _callback) throws QaseException {

        okhttp3.Call localVarCall = createResultValidateBeforeCall(code, idOrHash, resultCreate, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createResultBulk
     * @param code Code of project, where to search entities. (required)
     * @param id Identifier. (required)
     * @param resultCreateBulk  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResultBulkCall(String code, Integer id, ResultCreateBulk resultCreateBulk, final ApiCallback _callback) throws QaseException {
        Object localVarPostBody = resultCreateBulk;

        // create path and map variables
        String localVarPath = "/result/{code}/{id}/bulk"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createResultBulkValidateBeforeCall(String code, Integer id, ResultCreateBulk resultCreateBulk, final ApiCallback _callback) throws QaseException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new QaseException("Missing the required parameter 'code' when calling createResultBulk(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new QaseException("Missing the required parameter 'id' when calling createResultBulk(Async)");
        }
        
        // verify the required parameter 'resultCreateBulk' is set
        if (resultCreateBulk == null) {
            throw new QaseException("Missing the required parameter 'resultCreateBulk' when calling createResultBulk(Async)");
        }
        

        okhttp3.Call localVarCall = createResultBulkCall(code, id, resultCreateBulk, _callback);
        return localVarCall;

    }

    /**
     * Bulk create test run result.
     * This method allows to create a lot of test run result at once. 
     * @param code Code of project, where to search entities. (required)
     * @param id Identifier. (required)
     * @param resultCreateBulk  (required)
     * @return Response
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public Response createResultBulk(String code, Integer id, ResultCreateBulk resultCreateBulk) throws QaseException {
        ApiResponse<Response> localVarResp = createResultBulkWithHttpInfo(code, id, resultCreateBulk);
        return localVarResp.getData();
    }

    /**
     * Bulk create test run result.
     * This method allows to create a lot of test run result at once. 
     * @param code Code of project, where to search entities. (required)
     * @param id Identifier. (required)
     * @param resultCreateBulk  (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response> createResultBulkWithHttpInfo(String code, Integer id, ResultCreateBulk resultCreateBulk) throws QaseException {
        okhttp3.Call localVarCall = createResultBulkValidateBeforeCall(code, id, resultCreateBulk, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk create test run result. (asynchronously)
     * This method allows to create a lot of test run result at once. 
     * @param code Code of project, where to search entities. (required)
     * @param id Identifier. (required)
     * @param resultCreateBulk  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResultBulkAsync(String code, Integer id, ResultCreateBulk resultCreateBulk, final ApiCallback<Response> _callback) throws QaseException {

        okhttp3.Call localVarCall = createResultBulkValidateBeforeCall(code, id, resultCreateBulk, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteResult
     * @param code Code of project, where to search entities. (required)
     * @param id Identifier. (required)
     * @param hash Hash. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResultCall(String code, Integer id, String hash, final ApiCallback _callback) throws QaseException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/result/{code}/{id}/{hash}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "hash" + "\\}", localVarApiClient.escapeString(hash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResultValidateBeforeCall(String code, Integer id, String hash, final ApiCallback _callback) throws QaseException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new QaseException("Missing the required parameter 'code' when calling deleteResult(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new QaseException("Missing the required parameter 'id' when calling deleteResult(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new QaseException("Missing the required parameter 'hash' when calling deleteResult(Async)");
        }
        

        okhttp3.Call localVarCall = deleteResultCall(code, id, hash, _callback);
        return localVarCall;

    }

    /**
     * Delete test run result.
     * This method allows to delete test run result. 
     * @param code Code of project, where to search entities. (required)
     * @param id Identifier. (required)
     * @param hash Hash. (required)
     * @return HashResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public HashResponse deleteResult(String code, Integer id, String hash) throws QaseException {
        ApiResponse<HashResponse> localVarResp = deleteResultWithHttpInfo(code, id, hash);
        return localVarResp.getData();
    }

    /**
     * Delete test run result.
     * This method allows to delete test run result. 
     * @param code Code of project, where to search entities. (required)
     * @param id Identifier. (required)
     * @param hash Hash. (required)
     * @return ApiResponse&lt;HashResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HashResponse> deleteResultWithHttpInfo(String code, Integer id, String hash) throws QaseException {
        okhttp3.Call localVarCall = deleteResultValidateBeforeCall(code, id, hash, null);
        Type localVarReturnType = new TypeToken<HashResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete test run result. (asynchronously)
     * This method allows to delete test run result. 
     * @param code Code of project, where to search entities. (required)
     * @param id Identifier. (required)
     * @param hash Hash. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResultAsync(String code, Integer id, String hash, final ApiCallback<HashResponse> _callback) throws QaseException {

        okhttp3.Call localVarCall = deleteResultValidateBeforeCall(code, id, hash, _callback);
        Type localVarReturnType = new TypeToken<HashResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResult
     * @param code Code of project, where to search entities. (required)
     * @param idOrHash Id or Hash. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A test run result. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResultCall(String code, String idOrHash, final ApiCallback _callback) throws QaseException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/result/{code}/{id_or_hash}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "id_or_hash" + "\\}", localVarApiClient.escapeString(idOrHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResultValidateBeforeCall(String code, String idOrHash, final ApiCallback _callback) throws QaseException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new QaseException("Missing the required parameter 'code' when calling getResult(Async)");
        }
        
        // verify the required parameter 'idOrHash' is set
        if (idOrHash == null) {
            throw new QaseException("Missing the required parameter 'idOrHash' when calling getResult(Async)");
        }
        

        okhttp3.Call localVarCall = getResultCall(code, idOrHash, _callback);
        return localVarCall;

    }

    /**
     * Get test run result by code.
     * This method allows to retrieve a specific test run result by Hash. 
     * @param code Code of project, where to search entities. (required)
     * @param idOrHash Id or Hash. (required)
     * @return ResultResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A test run result. </td><td>  -  </td></tr>
     </table>
     */
    public ResultResponse getResult(String code, String idOrHash) throws QaseException {
        ApiResponse<ResultResponse> localVarResp = getResultWithHttpInfo(code, idOrHash);
        return localVarResp.getData();
    }

    /**
     * Get test run result by code.
     * This method allows to retrieve a specific test run result by Hash. 
     * @param code Code of project, where to search entities. (required)
     * @param idOrHash Id or Hash. (required)
     * @return ApiResponse&lt;ResultResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A test run result. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultResponse> getResultWithHttpInfo(String code, String idOrHash) throws QaseException {
        okhttp3.Call localVarCall = getResultValidateBeforeCall(code, idOrHash, null);
        Type localVarReturnType = new TypeToken<ResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get test run result by code. (asynchronously)
     * This method allows to retrieve a specific test run result by Hash. 
     * @param code Code of project, where to search entities. (required)
     * @param idOrHash Id or Hash. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A test run result. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResultAsync(String code, String idOrHash, final ApiCallback<ResultResponse> _callback) throws QaseException {

        okhttp3.Call localVarCall = getResultValidateBeforeCall(code, idOrHash, _callback);
        Type localVarReturnType = new TypeToken<ResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResults
     * @param code Code of project, where to search entities. (required)
     * @param limit A number of entities in result set. (optional, default to 10)
     * @param offset How many entities should be skipped. (optional, default to 0)
     * @param filters  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all test run results. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResultsCall(String code, Integer limit, Integer offset, Filters4 filters, final ApiCallback _callback) throws QaseException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/result/{code}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (filters != null) {
            localVarQueryParams.addAll(FilterHelper.getFilterPairs(filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResultsValidateBeforeCall(String code, Integer limit, Integer offset, Filters4 filters, final ApiCallback _callback) throws QaseException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new QaseException("Missing the required parameter 'code' when calling getResults(Async)");
        }
        

        okhttp3.Call localVarCall = getResultsCall(code, limit, offset, filters, _callback);
        return localVarCall;

    }

    /**
     * Get all test run results.
     * This method allows to retrieve all test run results stored in selected project. 
     * @param code Code of project, where to search entities. (required)
     * @param limit A number of entities in result set. (optional, default to 10)
     * @param offset How many entities should be skipped. (optional, default to 0)
     * @param filters  (optional)
     * @return ResultListResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all test run results. </td><td>  -  </td></tr>
     </table>
     */
    public ResultListResponse getResults(String code, Integer limit, Integer offset, Filters4 filters) throws QaseException {
        ApiResponse<ResultListResponse> localVarResp = getResultsWithHttpInfo(code, limit, offset, filters);
        return localVarResp.getData();
    }

    /**
     * Get all test run results.
     * This method allows to retrieve all test run results stored in selected project. 
     * @param code Code of project, where to search entities. (required)
     * @param limit A number of entities in result set. (optional, default to 10)
     * @param offset How many entities should be skipped. (optional, default to 0)
     * @param filters  (optional)
     * @return ApiResponse&lt;ResultListResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all test run results. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultListResponse> getResultsWithHttpInfo(String code, Integer limit, Integer offset, Filters4 filters) throws QaseException {
        okhttp3.Call localVarCall = getResultsValidateBeforeCall(code, limit, offset, filters, null);
        Type localVarReturnType = new TypeToken<ResultListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all test run results. (asynchronously)
     * This method allows to retrieve all test run results stored in selected project. 
     * @param code Code of project, where to search entities. (required)
     * @param limit A number of entities in result set. (optional, default to 10)
     * @param offset How many entities should be skipped. (optional, default to 0)
     * @param filters  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all test run results. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResultsAsync(String code, Integer limit, Integer offset, Filters4 filters, final ApiCallback<ResultListResponse> _callback) throws QaseException {

        okhttp3.Call localVarCall = getResultsValidateBeforeCall(code, limit, offset, filters, _callback);
        Type localVarReturnType = new TypeToken<ResultListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateResult
     * @param code Code of project, where to search entities. (required)
     * @param id Identifier. (required)
     * @param hash Hash. (required)
     * @param resultUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResultCall(String code, Integer id, String hash, ResultUpdate resultUpdate, final ApiCallback _callback) throws QaseException {
        Object localVarPostBody = resultUpdate;

        // create path and map variables
        String localVarPath = "/result/{code}/{id}/{hash}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "hash" + "\\}", localVarApiClient.escapeString(hash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateResultValidateBeforeCall(String code, Integer id, String hash, ResultUpdate resultUpdate, final ApiCallback _callback) throws QaseException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new QaseException("Missing the required parameter 'code' when calling updateResult(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new QaseException("Missing the required parameter 'id' when calling updateResult(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new QaseException("Missing the required parameter 'hash' when calling updateResult(Async)");
        }
        
        // verify the required parameter 'resultUpdate' is set
        if (resultUpdate == null) {
            throw new QaseException("Missing the required parameter 'resultUpdate' when calling updateResult(Async)");
        }
        

        okhttp3.Call localVarCall = updateResultCall(code, id, hash, resultUpdate, _callback);
        return localVarCall;

    }

    /**
     * Update test run result.
     * This method allows to update test run result. 
     * @param code Code of project, where to search entities. (required)
     * @param id Identifier. (required)
     * @param hash Hash. (required)
     * @param resultUpdate  (required)
     * @return HashResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public HashResponse updateResult(String code, Integer id, String hash, ResultUpdate resultUpdate) throws QaseException {
        ApiResponse<HashResponse> localVarResp = updateResultWithHttpInfo(code, id, hash, resultUpdate);
        return localVarResp.getData();
    }

    /**
     * Update test run result.
     * This method allows to update test run result. 
     * @param code Code of project, where to search entities. (required)
     * @param id Identifier. (required)
     * @param hash Hash. (required)
     * @param resultUpdate  (required)
     * @return ApiResponse&lt;HashResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HashResponse> updateResultWithHttpInfo(String code, Integer id, String hash, ResultUpdate resultUpdate) throws QaseException {
        okhttp3.Call localVarCall = updateResultValidateBeforeCall(code, id, hash, resultUpdate, null);
        Type localVarReturnType = new TypeToken<HashResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update test run result. (asynchronously)
     * This method allows to update test run result. 
     * @param code Code of project, where to search entities. (required)
     * @param id Identifier. (required)
     * @param hash Hash. (required)
     * @param resultUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResultAsync(String code, Integer id, String hash, ResultUpdate resultUpdate, final ApiCallback<HashResponse> _callback) throws QaseException {

        okhttp3.Call localVarCall = updateResultValidateBeforeCall(code, id, hash, resultUpdate, _callback);
        Type localVarReturnType = new TypeToken<HashResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
